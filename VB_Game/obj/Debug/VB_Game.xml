<?xml version="1.0"?>
<doc>
<assembly>
<name>
VB_Game
</name>
</assembly>
<members>
<member name="T:VB_Game.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:VB_Game.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:VB_Game.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:VB_Game.AudioMaster">
 <summary>
 Manages all game audio and the audio context
 </summary>
</member>
<member name="F:VB_Game.Gun.FIRE_RATE">
 <summary>
 Fire rate of gun in seconds
 </summary>
</member>
<member name="M:VB_Game.Chest.setPos(OpenTK.Vector2)">
 <summary>
 Sets position of chest adjusting to center on bottom of tile
 </summary>
 <param name="pos"></param>
</member>
<member name="T:VB_Game.Camera">
 <summary>
 Represents the current viewport
 </summary>
</member>
<member name="M:VB_Game.Camera.update">
 <summary>
 Called every update frame
 </summary>
</member>
<member name="M:VB_Game.Camera.toWorldCoords(OpenTK.Vector2)">
 <summary>
 Takes a screen cordinate and converts it into world coordinates based on transform matrix
 </summary>
 <param name="screenCoord"></param>
 <returns></returns>
</member>
<member name="M:VB_Game.ContentPipe.loadTexture(System.Drawing.Bitmap)">
 <summary>
 Loads texture into memory under OpenGL Texture
 </summary>
 <param name="img">Bitmap of texture</param>
 <returns></returns>
</member>
<member name="M:VB_Game.ContentPipe.loadTexture(System.String)">
 <summary>
 Loads texture into memory under OpenGL Texture
 </summary>
 <param name="path"></param>
 <returns></returns>
</member>
<member name="M:VB_Game.ContentPipe.loadWave(System.String)">
 <summary>
 Loads a wav file and places it in buffer
 </summary>
 <param name="path"></param>
 <returns></returns>
</member>
<member name="M:VB_Game.ContentPipe.loadWave(System.IO.Stream)">
 <summary>
 Loads a wav file and places it in buffer
 </summary>
 <param name="stream"></param>
 <returns></returns>
</member>
<member name="M:VB_Game.ContentPipe.GetSoundFormat(System.Int32,System.Int32)">
 <summary>
 Determines wave file sound format from number of channels and bits
 </summary>
 <param name="channels"></param>
 <param name="bits"></param>
 <returns></returns>
</member>
<member name="M:VB_Game.Enemy.#ctor(OpenTK.Vector2,VB_Game.Texture,System.Boolean)">
 <summary>
 Creates new enemy
 </summary>
 <param name="pos"></param>
 <param name="texture"></param>
 <param name="leftDir">Should go left first</param>
</member>
<member name="F:VB_Game.Player.xOrientation">
 <summary>
 Current orientation on x axis (-1 facing left, 1 facing right)
 </summary>
</member>
<member name="M:VB_Game.Player.#ctor(OpenTK.Vector2,VB_Game.TextureAtlas)">
 <summary>
 Creates new player (only one player should be created)
 </summary>
 <param name="spawnPos"></param>
 <param name="textureAtlas"></param>
</member>
<member name="T:VB_Game.SimpleProjectile">
 <summary>
 Projectile goes straight (no gravity affect)
 </summary>
</member>
<member name="M:VB_Game.SimpleProjectile.#ctor(OpenTK.Vector2,System.Int32)">
 <summary>
 Creates new projectile
 </summary>
 <param name="startPos"></param>
 <param name="dx">direction of profile (1 --> right, -1 --> left)</param>
</member>
<member name="T:VB_Game.Button">
 <summary>
 Represents a single clickable button on screen
 </summary>
</member>
<member name="M:VB_Game.Button.#ctor(System.String,OpenTK.Vector2,System.Drawing.Size,VB_Game.ButtonStyle)">
 <summary>
 Creates a new button
 </summary>
 <param name="text">Button display text</param>
 <param name="pos">Initial position</param>
 <param name="size">Overall button dimensions</param>
 <param name="style">Button Appearance style</param>
</member>
<member name="M:VB_Game.Button.setOnClickListener(VB_Game.Button.OnClick)">
 <summary>
 Sets a click listener which is called when the button is clicked
 </summary>
 <param name="listener"></param>
</member>
<member name="F:VB_Game.Control._scale">
 <summary>
 Scale property defaulting to (1, 1)
 </summary>
</member>
<member name="T:VB_Game.TextureAtlas">
 <summary>
 Loads in and stores a collection of sub images from one image
 </summary>
</member>
<member name="T:VB_Game.BoundingRect">
 <summary>
 Rectangle bounding objects
 </summary>
</member>
<member name="T:VB_Game.PhysicUtils">
 <summary>
 Handles miscellaneous physics related calculations
 </summary>
</member>
<member name="M:VB_Game.PhysicUtils.canCollide(System.Int32,System.Int32)">
 <summary>
 Checks whether the bitmask signatures can collide
 </summary>
 <param name="collisionBitmask"></param>
 <param name="categoryBitmask"></param>
 <returns></returns>
</member>
<member name="M:VB_Game.PhysicUtils.doesCollide(VB_Game.RigidBody,VB_Game.RigidBody)">
 <summary>
 Performs an AABB collision detection test
 </summary>
 <param name="bodyA"></param>
 <param name="bodyB"></param>
 <returns>Collide</returns>
</member>
<member name="M:VB_Game.PhysicUtils.doesCollide(VB_Game.GameObject,VB_Game.GameObject)">
 <summary>
 Performs an AABB collision detection test
 </summary>
 <param name="objA"></param>
 <param name="objB"></param>
 <returns>Collide</returns>
</member>
<member name="T:VB_Game.PhysicsHandler">
 <summary>
 Handles all physics related calculations and operations
 </summary>
</member>
<member name="F:VB_Game.PhysicsHandler.delta">
 <summary>
 Time since last update
 </summary>
</member>
<member name="F:VB_Game.PhysicsHandler.physicsBodies">
 <summary>
 List of all entities affected by physics (e.g. gravity)
 </summary>
</member>
<member name="M:VB_Game.PhysicsHandler.addPhysicsBody(VB_Game.RigidBody)">
 <summary>
 Adds body to physics bodies and does setup for bitmasks
 </summary>
 <param name="rigidBody"></param>
</member>
<member name="M:VB_Game.PhysicsHandler.applyGravity(VB_Game.Entity)">
 <summary>
 Applies acceleration due to gravity (defined by constant) to entity
 </summary>
 <param name="e">Target entity</param>
</member>
<member name="M:VB_Game.PhysicsHandler.applyAcceleration(VB_Game.Entity,OpenTK.Vector2)">
 <summary>
 Applies a constant acceleration to an entity
 </summary>
 <param name="e">Target Entity</param>
 <param name="acc">Acceleration in ms-2</param>
</member>
<member name="M:VB_Game.PhysicsHandler.update(System.Double)">
 <summary>
 Updates physic
 </summary>
 <param name="d">Time delta since last update</param>
</member>
<member name="M:VB_Game.PhysicsHandler.doDisposals">
 <summary>
 Disposes all items currently in queue
 </summary>
 <returns></returns>
</member>
<member name="M:VB_Game.PhysicsHandler.collisionsCheck">
 <summary>
 Checks collisions between all compatible bodies
 </summary>
</member>
<member name="M:VB_Game.PhysicsHandler.handleCollision(VB_Game.RigidBody,VB_Game.RigidBody)">
 <summary>
 Handles collision events, sending out events to colliders
 </summary>
 <param name="bodyA">Primary Body</param>
 <param name="bodyB">Secondary Body</param>
</member>
<member name="M:VB_Game.PhysicsHandler.scheduleDispose(VB_Game.GameObject)">
 <summary>
 Schedules the obj to be disposed once collections are not being used
 </summary>
 <param name="obj"></param>
 <returns></returns>
</member>
<member name="T:VB_Game.RigidBody">
 <summary>
 Represents a body on which physics simulations are run on
 </summary>
</member>
<member name="F:VB_Game.RigidBody.categoryBitMask">
 <summary>
 Bit mask for what can collide with this object
 </summary>
</member>
<member name="F:VB_Game.RigidBody.collisionBitMask">
 <summary>
 Bit mask for what this object can collide with
 </summary>
</member>
<member name="T:VB_Game.GameScreen">
 <summary>
 Main screen where the game is run
 </summary>
</member>
<member name="M:VB_Game.GameScreen.restart">
 <summary>
 Restarts game resetting everything to default states
 </summary>
</member>
<member name="M:VB_Game.GameScreen.removeGameObjectNextFrame(VB_Game.GameObject)">
 <summary>
 Adds objects to be removed next frame to improve visuals
 </summary>
 <param name="obj"></param>
</member>
<member name="T:VB_Game.Screen">
 <summary>
 Represents a screen in the game (e.g. gamescreen, pausescreen)
 </summary>
</member>
<member name="T:VB_Game.Entity">
 <summary>
 Represents an on screen game object
 </summary>
</member>
<member name="T:VB_Game.TextLabel">
 <summary>
 Represents a text string drawn on screen
 </summary>
</member>
<member name="M:VB_Game.TextLabel.#ctor(System.String,System.Drawing.Size,System.Drawing.Brush)">
 <summary>
 Creates new textlabel that is the maximum size that can fit in the given bounding box
 </summary>
 <param name="text"></param>
 <param name="boundingSize"></param>
 <param name="brush"></param>
</member>
<member name="M:VB_Game.TextLabel.genTexture">
 <summary>
 Generates new font texture
 </summary>
</member>
<member name="T:VB_Game.GameObject">
 <summary>
 Represents any graphical game object
 </summary>
</member>
<member name="F:VB_Game.GameObject._scale">
 <summary>
 Scale propery defaulting to (1, 1)
 </summary>
</member>
<member name="F:VB_Game.GameObject._affectedByGravity">
 <summary>
 Should obj be affected by gravitational force
 </summary>
</member>
<member name="M:VB_Game.GameObject.onCollide(VB_Game.GameObject)">
 <summary>
 Override this method to subscribe to collision events
 </summary>
 <param name="objB">Other object colliding with</param>
</member>
<member name="M:VB_Game.GameObject.dispose">
 <summary>
 Removes GameObject from all relevant containers
 </summary>
</member>
<member name="M:VB_Game.SpriteBatch.drawImage(VB_Game.ImageTexture,OpenTK.Vector2,OpenTK.Vector2,System.Drawing.Color,OpenTK.Vector2)">
 <summary>
 Draws an image on the screen
 </summary>
 <param name="texture"></param>
 <param name="pos"></param>
 <param name="scale"></param>
 <param name="color"></param>
 <param name="origin"></param>
</member>
<member name="M:VB_Game.SpriteBatch.drawImage(VB_Game.ImageTexture,OpenTK.Vector2,OpenTK.Vector2)">
 <summary>
 Draws an image on the screen
 </summary>
 <param name="texture"></param>
 <param name="pos"></param>
 <param name="scale"></param>
</member>
<member name="M:VB_Game.SpriteBatch.drawImage(VB_Game.ImageTexture,OpenTK.Vector2)">
 <summary>
 Draws an image on the screen
 </summary>
 <param name="texture"></param>
 <param name="pos"></param>
</member>
<member name="M:VB_Game.SpriteBatch.drawRect(OpenTK.Vector2,OpenTK.Vector2,System.Drawing.Color)">
 <summary>
 Draws a rectangle on screen
 </summary>
 <param name="size"></param>
 <param name="pos"></param>
 <param name="color"></param>
</member>
<member name="M:VB_Game.SpriteBatch.drawObject(VB_Game.GameObject)">
 <summary>
 Draws a game object
 </summary>
 <param name="obj"></param>
</member>
<member name="M:VB_Game.SpriteBatch.drawObject(VB_Game.GameObject,OpenTK.Vector2)">
 <summary>
 Draws game object applying a scale
 </summary>
 <param name="obj"></param>
 <param name="scale"></param>
</member>
<member name="M:VB_Game.SpriteBatch.begin(System.Object,System.Object)">
 <summary>
 Prepares screen for rendering by setting up viewport and projection matricies
 </summary>
 <param name="screenWidth"></param>
 <param name="screenHeight"></param>
</member>
<member name="M:VB_Game.SpriteBatch.normaliseScreenCoords(System.Int32,System.Int32)">
 <summary>
 Returns a normalised representation of screen coords to game coords
 </summary>
 <param name="x"></param>
 <param name="y"></param>
 <returns>Normalised Coords</returns>
</member>
<member name="M:VB_Game.SpriteBatch.normaliseScreenX(System.Int32)">
 <summary>
 Returns a normalised representation of screen coord x to game coord x
 </summary>
 <param name="x"></param>
 <returns>Normalised Coord</returns>
</member>
<member name="M:VB_Game.SpriteBatch.normaliseScreenY(System.Int32)">
 <summary>
 Returns a normalised representation of screen coord y to game coord y
 </summary>
 <param name="x"></param>
 <returns>Normalised Coord</returns>
</member>
<member name="M:VB_Game.InputHandler.isKeyDown(System.Int32)">
 <summary>
 Returns whether specified key is currently pressed
 </summary>
 <param name="keyCode"></param>
 <returns></returns>
</member>
<member name="T:VB_Game.KeyListener">
 <summary>
 Interface providing ability to register for key events
 </summary>
</member>
<member name="T:VB_Game.MouseListener">
 <summary>
 Interface providing ability to register for mouse events
 </summary>
</member>
<member name="T:VB_Game.Map">
 <summary>
 Represents a tile map consisting of a grid of tiles
 </summary>
</member>
<member name="M:VB_Game.Map.spawnRandomChest">
 <summary>
 Creates 'new' chest by moving crate to a random position
 as given in chestSpawnPositions
 </summary>
</member>
<member name="M:VB_Game.Map.loadMap">
 <summary>
 Loads Json Formatted map into memory
 </summary>
</member>
<member name="M:VB_Game.Map.render(System.Double)">
 <summary>
 Renders the map to screen
 </summary>
</member>
<member name="T:VB_Game.Tile">
 <summary>
 A single tile in the tile map grid
 </summary>
</member>
<member name="M:VB_Game.Tile.Clone">
 <summary>
 Creates a clone of this object with same properties (avoiding reloading of textures)
 </summary>
 <returns></returns>
</member>
<member name="T:VB_Game.TileMapHandler">
 <summary>
 Handles map resources
 </summary>
</member>
<member name="M:VB_Game.TileMapHandler.loadAllTileTextures">
 <summary>
 Loads all tile textures fomr res/img/tiles into memory
 </summary>
</member>
<member name="F:VB_Game.Constants.COLLISION_CATEGORIES">
 <summary>
 All possible collidable obj bit mask signatures
 </summary>
</member>
<member name="T:VB_Game.Constants.Physics_CATEGORY">
 <summary>
 Different types of physics bodies mapping to category bitmasks
 </summary>
</member>
<member name="T:VB_Game.Constants.Physics_COLLISION">
 <summary>
 Different types of physics bodies mapping to collision bitmasks
 </summary>
</member>
</members>
</doc>
